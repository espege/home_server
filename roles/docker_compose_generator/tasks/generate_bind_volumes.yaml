---
- name: Ansible | Stat for directory structure in {{ docker_app }} # If found, then copy as remote_directory
  ansible.builtin.stat:
    path: "{{ docker_apps_path }}/{{ docker_app }}/{{ docker_app }}"
  delegate_to: localhost
  become: false
  register: directory_to_copy

- name: Facts | Set user and group for bind volumes
  ansible.builtin.set_fact:
    bind_volume_owner: "{{ current_loop_facts.bind_vol_owner | default('root') }}"
    bind_volume_group: "{{ current_loop_facts.bind_vol_owner | default('root') }}"

- name: Facts | Override bind volume group with FIRST extra group if bind_vol_group_is_extra is true
  ansible.builtin.set_fact:
    bind_volume_group: "{{ extra_groups_gid_map.values() | first }}"
  when: (current_loop_facts.bind_vol_group_is_extra | default(false)) is truthy

- name: Ansible | Copy remote directory if directory exists with name {{ docker_app }}
  when: directory_to_copy is defined and directory_to_copy.stat.exists
  block:
    - name: Ansible | Localhost operations
      become: false
      delegate_to: localhost
      block:
        - name: Create temp directory for j2 processing
          ansible.builtin.tempfile:
            path: "{{ playbook_dir }}"
            state: directory
            suffix: _j2tmp
          register: temp_j2_dir
          changed_when: false

        - name: Copy | Docker App Directory Structure to temp dir
          ansible.builtin.copy:
            src: "{{ directory_to_copy.stat.path }}"
            dest: "{{ temp_j2_dir.path }}/"
            mode: "{{ dir_permissions | default('770') }}"
          changed_when: false

        - name: Ansible | Find | .j2 files in temp directory
          ansible.builtin.find:
            paths: "{{ temp_j2_dir.path }}"
            patterns: "*.j2"
            file_type: file
            recurse: true
          register: temp_j2_files

        - name: Ansible | Convert .j2 files in temp dir
          ansible.builtin.template:
            src: "{{ item.path }}"
            dest: "{{ item.path | regex_replace('\\.j2$', '') }}"
            mode: "0770"
          loop: "{{ temp_j2_files.files }}"
          loop_control:
            label: "{{ item.path | regex_replace('\\.j2$', '') }}"
          when: temp_j2_files is defined and temp_j2_files.files | length > 0
          changed_when: false

        - name: Template | delete .j2 files in temp dir
          ansible.builtin.file:
            path: "{{ item.path }}"
            state: absent
          loop: "{{ temp_j2_files.files }}"
          loop_control:
            label: "{{ item.path }}"
          when: temp_j2_files is defined and temp_j2_files.files | length > 0
          changed_when: false

    - name: Copy processed directory to final destination
      ansible.builtin.copy:
        src: "{{ temp_j2_dir.path }}/"
        dest: "{{ remote_directory }}"
        mode: "{{ dir_permissions | default(docker_compose_generator_default_dir_permissions) }}"
        owner: "{{ bind_volume_owner }}"
        group: "{{ bind_volume_group }}"

  rescue:
    - name: Remove temp directory
      become: false
      delegate_to: localhost
      ansible.builtin.file:
        path: "{{ temp_j2_dir.path }}"
        state: absent
      when: temp_j2_dir is defined and temp_j2_dir.path is defined
      changed_when: false

  always:
    # Cleanup temp directory
    - name: Remove temp directory
      become: false
      delegate_to: localhost
      ansible.builtin.file:
        path: "{{ temp_j2_dir.path }}"
        state: absent
      when: temp_j2_dir is defined and temp_j2_dir.path is defined
      changed_when: false

- name: Block | Ensure bind volumes exist for {{ docker_volume }}
  block:
    - name: Set Fact | Path is a volume
      ansible.builtin.set_fact:
        split_volume: "{{ docker_volume | splitext | list }}"

    - name: Docker Volumes | Ensure explicit bind volumes from docker_compose {{ docker_volume }}
      become: true
      ansible.builtin.file:
        path: "{{ docker_volume }}"
        state: 'directory'
        owner: "{{ bind_volume_owner }}"
        group: "{{ bind_volume_group }}"
        mode: "{{ dir_permissions | default(docker_compose_generator_default_dir_permissions) }}"
        recurse: false # Takes too long for large directories
      when:
        - split_volume is defined and split_volume[1] == '' # Path ends without file extension
      tags:
        - directories
      check_mode: true
